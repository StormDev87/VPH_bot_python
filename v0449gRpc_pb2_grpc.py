# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import v0449gRpc_pb2 as v0449gRpc__pb2


class v0449gRpcSvcStub(object):
    """// The greeting service definition.
    service Greeter {
    // Sends a greeting
    rpc SayHello (HelloRequest) returns (HelloReply) {}
    }
    Sends a greeting
    rpc getRtData (dataRequest) returns (dataAnswer) {}
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.xchRtDataJs = channel.unary_unary(
                '/v0449gRpc.v0449gRpcSvc/xchRtDataJs',
                request_serializer=v0449gRpc__pb2.data2PlcJs.SerializeToString,
                response_deserializer=v0449gRpc__pb2.data2HmiJs.FromString,
                )
        self.xchRtDataJsSlave = channel.unary_unary(
                '/v0449gRpc.v0449gRpcSvc/xchRtDataJsSlave',
                request_serializer=v0449gRpc__pb2.slaveReq2Plc.SerializeToString,
                response_deserializer=v0449gRpc__pb2.data2HmiJs.FromString,
                )


class v0449gRpcSvcServicer(object):
    """// The greeting service definition.
    service Greeter {
    // Sends a greeting
    rpc SayHello (HelloRequest) returns (HelloReply) {}
    }
    Sends a greeting
    rpc getRtData (dataRequest) returns (dataAnswer) {}
    """

    def xchRtDataJs(self, request, context):
        """richiesta da terminale a server Master
        rpc xchRtData (data2Plc) returns (data2Hmi) {}

        richiesta da terminale a server Slave
        rpc xchRtDataSlave (slaveReq2Plc) returns (data2Hmi) {}

        richiesta da terminale a server Master
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def xchRtDataJsSlave(self, request, context):
        """richiesta da terminale a server Slave
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_v0449gRpcSvcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'xchRtDataJs': grpc.unary_unary_rpc_method_handler(
                    servicer.xchRtDataJs,
                    request_deserializer=v0449gRpc__pb2.data2PlcJs.FromString,
                    response_serializer=v0449gRpc__pb2.data2HmiJs.SerializeToString,
            ),
            'xchRtDataJsSlave': grpc.unary_unary_rpc_method_handler(
                    servicer.xchRtDataJsSlave,
                    request_deserializer=v0449gRpc__pb2.slaveReq2Plc.FromString,
                    response_serializer=v0449gRpc__pb2.data2HmiJs.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'v0449gRpc.v0449gRpcSvc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class v0449gRpcSvc(object):
    """// The greeting service definition.
    service Greeter {
    // Sends a greeting
    rpc SayHello (HelloRequest) returns (HelloReply) {}
    }
    Sends a greeting
    rpc getRtData (dataRequest) returns (dataAnswer) {}
    """

    @staticmethod
    def xchRtDataJs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/v0449gRpc.v0449gRpcSvc/xchRtDataJs',
            v0449gRpc__pb2.data2PlcJs.SerializeToString,
            v0449gRpc__pb2.data2HmiJs.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def xchRtDataJsSlave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/v0449gRpc.v0449gRpcSvc/xchRtDataJsSlave',
            v0449gRpc__pb2.slaveReq2Plc.SerializeToString,
            v0449gRpc__pb2.data2HmiJs.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
